{"version":3,"sources":["components/InputForm/index.js","components/TextInfo/index.js","container/pages/index.js","container/app/index.jsx","index.js"],"names":["InputForm","className","id","type","name","value","placeholder","onChange","onFocus","input","classNames","classname","defaultProps","TextInfo","children","Home","state","palindrome","palindromeResult","calc","calcLeft","result","handlePalindrome","e","valueText","target","setState","len","Math","floor","length","i","handleCalculatorFraction","listFractions","intValue","parseInt","temp","resArr","forEach","val","key","money","total","console","log","this","map","idx","Component","App","basename","process","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11dbaec1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport './styles.scss';\n\nconst InputForm = ({\n  className,\n  id,\n  type,\n  name,\n  value,\n  placeholder,\n  onChange,\n  onFocus,\n  input,\n}) => {\n  const classNames = classname('input-form', className);\n  return (\n    <Fragment>\n      <input\n        className={classNames}\n        id={id}\n        type={type}\n        name={name}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        onFocus={onFocus}\n        {...input}\n      />\n    </Fragment>\n  );\n};\n\nInputForm.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  type: PropTypes.oneOf(['text', 'number']),\n  name: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  input: PropTypes.object,\n};\n\nInputForm.defaultProps = {\n  className: '',\n  id: '',\n  type: 'text',\n  name: '',\n  value: '',\n  placeholder: '',\n  onChange: () => {},\n  onFocus: () => {},\n  input: {},\n};\n\nexport default InputForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport './styles.scss';\n\nconst TextInfo = ({ className, children }) => {\n  const classNames = classname('text-info', className);\n  return (\n    <p className={classNames}>{children}</p>\n  )\n}\n\nTextInfo.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nTextInfo.defaultProps = {\n  className: '',\n  children: {},\n};\n\nexport default TextInfo;\n","import React, { Component, Fragment } from 'react';\nimport {InputForm, TextInfo } from 'components';\nimport './styles.scss';\n\nclass Home extends Component {\n  state = {\n    palindrome: '',\n    palindromeResult: '',\n    calc: '',\n    calcLeft: null,\n    result: []\n  };\n\n  handlePalindrome = (e) => {\n    let valueText = e.target.value;\n    this.setState({\n      [e.target.name]: valueText\n    });\n\n    let len = Math.floor(valueText.length / 2);\n    for (let i = 0; i < len; i++) {\n      if (valueText[i] !== valueText[valueText.length - i - 1]) {\n        this.setState({\n          palindromeResult: 'Is not palindrome'\n        })\n      } else {\n        this.setState({\n          palindromeResult: 'Is palindrome'\n        })\n      }\n    }\n  };\n\n  handleCalculatorFraction = (e) => {\n    let value = e.target.value;\n    this.setState({ \n      [e.target.name]: value,\n      calcLeft: null, \n      result: [],\n    });\n    const listFractions = [100000, 50000, 20000, 10000, 5000, 2000, 1000, 500, 200, 100];\n    let intValue = parseInt(value);\n    let temp = [];\n    let result = [];\n\n    while (intValue >= 99) {\n      for (let i = 0; i < listFractions.length; i++) {\n        if (intValue >= listFractions[i]) {\n          temp[listFractions[i]] = temp[listFractions[i]] ? temp[listFractions[i]] + 1 : 1;\n          intValue = intValue - listFractions[i];\n        };\n      };\n    };\n\n    let resArr = temp.length - 1;\n    temp.forEach((val, key) => {\n      result[resArr] = { money: key, total: val };\n      resArr--;\n    });\n\n    console.log(result);\n    this.setState({ calcLeft: intValue, result: result });\n  };\n\n  render() {\n    const {\n      handlePalindrome,\n      handleCalculatorFraction,\n      state : { \n        palindrome, \n        calc, \n        palindromeResult,\n        calcLeft,\n        result,\n       }\n    } = this;\n    \n    return (\n      <div className='p-home'>\n        <div className='container'>\n          <div className='home-wrapper'>\n            <div className='palindrome'>\n              <h1>Palindrome</h1>\n              <InputForm \n                id='palindrome'\n                value={palindrome}\n                name='palindrome'\n                placeholder='Palindrome'\n                onChange={handlePalindrome}\n                type='text'\n              />\n              <div className='palindrome-result'>\n                <TextInfo>Result : {palindromeResult}</TextInfo>\n              </div>\n            </div>\n            <div className='calc-fraction'>\n              <h1>Calculator Fraction</h1>\n              <InputForm \n                id='calc'\n                value={calc}\n                name='calc'\n                placeholder='Calculator Fraction'\n                type='text'\n                onChange={handleCalculatorFraction}\n              />\n              <table className='calc-result'>\n                {result.map((val, idx) => (\n                  <Fragment key={idx}>\n                    <tr>\n                      <td>\n                        <TextInfo>Money Result: {val.money}</TextInfo>\n                      </td>\n                      <td>\n                        <TextInfo>Total Result: {val.total}</TextInfo>\n                      </td>\n                    </tr>\n                  </Fragment>\n                ))}\n                <TextInfo>Left: {calcLeft}</TextInfo>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport Home from 'container/pages';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'styles/main.scss';\nimport App from 'container/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}